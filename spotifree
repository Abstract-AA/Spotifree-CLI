#!/bin/bash

set -e

for cmd in yt-dlp mpv; do
  command -v $cmd >/dev/null 2>&1 || { echo "$cmd is required but not installed. Aborting."; exit 1; }
done

TARGET_DIR="$HOME/Music"
TMP_DIR="/tmp/ytmp3"
AUDIO_QUALITY="64"  # Default quality in kbps
mkdir -p "$TMP_DIR" "$TARGET_DIR"

# Cache variables
LAST_STREAM_URL=""
LAST_QUERY=""
declare -A SONG_CACHE
LOCAL_PLAYLIST=()
HISTORY=()
CACHE_LIMIT=20
LOOP_MODE=false
SEARCH_RESULTS_SIZE=8 

cols=$(tput cols)
lines=$(tput lines)

# Updates the dimensions whenever the user resizes
trap 'cols=$(tput cols); lines=$(tput lines)' WINCH

center() {
    local text="$1"
    local pad=$(( (cols - ${#text}) / 2 ))
    [[ $pad -le 0 ]] && pad=0
    printf "%*s%s\n" "$pad" "" "$text"
}

hr() {
    printf '%*s\n' "$cols" '' | tr ' ' '-'
}

header_box() {
    local title="$1"
    clear
    hr
    center "$title"
    hr
}

# Multi-line block version
center_block() {
    while IFS= read -r line; do
        center "$line"
    done <<< "$@"
}

print_header() {
  clear
  center "                            ____           __   _  ___                                       "
  center "  ____ ____ ____ ____      / __/___  ___  / /_ (_)/ _/____ ___  ___       ____ ____ ____ ____"
  center " /___//___//___//___/     _\ \ / _ \/ _ \/ __// // _// __// -_)/ -_)     /___//___//___//___/"
  center "/___//___//___//___/     /___// .__/\___/\__//_//_/ /_/   \__/ \__/     /___//___//___//___/ "
  center "                             /_/                                                             "
  center "---------------------------------------------------------------------------------------------"
  center "|                                Your free CLI Music Platform                               |"
  center "---------------------------------------------------------------------------------------------"
  hr
}

print_main_header() {
    center " [Space] Play/Pause   [←/→] Seek 5s  [↓/↑] Seek 1m   [9/0] Vol -/+   [s] Settings   [q] Quit"
    center " [r] Repeat   [h] Streaming History  [d] Download last streamed song  [l] Browse Local Files"
    hr
}

print_browser_header() {
    center " [Space] Play/Pause      [←/→] Seek 5s      [↓/↑] Seek 1m       [9/0] Vol -/+       [q] Quit"
    center "      [p] Play local song playlist      [v] View playlist      [c] Clear playlist"
    center " [# + -r] Loop song    [# + -p] Add to playlist (e.g. '1 -p')   [#,#] Serial play (e.g. 1,4)"
    hr
}


play_stream() {
  local stream_url="$1"
  local loop="$2"
  if [ "$loop" = true ]; then
    echo "                  Loop mode activated"
    echo
    mpv --no-video --loop "$stream_url"
  else
  echo
    mpv --no-video "$stream_url"
  fi
  sleep 1
}

browse_local_files() {
  local start_dir="$1"
  local current_dir

  if [[ -z "$start_dir" || ! -d "$start_dir" ]]; then
    start_dir="$HOME/Music"
  fi
  current_dir="$start_dir"

  while true; do
    clear
    print_header
    print_browser_header
    echo
    echo "  ======================[ Browsing: $current_dir ]======================"

    local items=()
    local index=1

    echo "  b. .. (return to previous directory)"

    # List folders first, then files
    while IFS= read -r entry; do
      items+=("$entry")
    done < <(find "$current_dir" -maxdepth 1 -mindepth 1 -type d | sort)

    while IFS= read -r entry; do
      items+=("$entry")
    done < <(find "$current_dir" -maxdepth 1 -mindepth 1 -type f | sort)

    for i in "${!items[@]}"; do
      entry_name="${items[$i]}"
      base_name="$(basename "$entry_name")"
      if [[ -d "$entry_name" ]]; then
        printf "  %d. \e[1m%s\e[0m\n" $((i+1)) "$base_name"
      else
        printf "  %d. %s\n" $((i+1)) "$base_name"
      fi
    done
    echo "  ============================================================================"
    echo "  Current playlist size: (${#LOCAL_PLAYLIST[@]} files)"
    echo -n "  Enter number >>> "
    read -r -a input_parts

    local loop=false
    local mark_only=false
    local numbers=()

    for arg in "${input_parts[@]}"; do
      case "$arg" in
        -r) loop=true ;;
        -p) mark_only=true ;;
        p)  
          if [[ ${#LOCAL_PLAYLIST[@]} -eq 0 ]]; then
    	    echo "  The playlist is empty."
            sleep 1
            continue 2
          else
            echo "  Playing playlist..."
            echo
            mpv --no-video "${LOCAL_PLAYLIST[@]}"
          fi
          sleep 1
          continue 2
          ;;
        c)
          LOCAL_PLAYLIST=()
          echo "  Playlist cleared."
          sleep 1
          continue 2
          ;;
        b) current_dir=$(dirname "$current_dir"); continue 2 ;;
        v)
          echo
          echo "  ===========================[ Playlist Contents ]==========================="
          if [[ ${#LOCAL_PLAYLIST[@]} -eq 0 ]]; then
            echo "  Playlist is empty."
          else
            for i in "${!LOCAL_PLAYLIST[@]}"; do
              path="${LOCAL_PLAYLIST[$i]}"
              name=$(basename "$path")
              printf "  %2d. %s\n" $((i+1)) "$name"
            done
          fi
          echo "  ==========================================================================="
          echo
          read -rp "  Press enter to continue..." _
          continue 2
          ;;
        b) current_dir=$(dirname "$current_dir"); continue 2 ;;
        q) break 2 ;;
        *,*) IFS=',' read -ra numbers <<< "$arg" ;;
        [0-9]*) numbers+=("$arg") ;;
        q) break 2 ;;
        *,*) IFS=',' read -ra numbers <<< "$arg" ;;
        [0-9]*) numbers+=("$arg") ;;
      esac
    done

    for num in "${numbers[@]}"; do
      if [[ "$num" =~ ^[0-9]+$ ]] && ((num >= 1 && num <= ${#items[@]})); then
        selected="${items[$((num - 1))]}"
        if [[ -d "$selected" ]]; then
          current_dir="$selected"
          break
        elif [[ -f "$selected" && "$selected" =~ \.(mp3|m4a|opus|flac|wav|ogg)$ ]]; then
          if [[ "$mark_only" == true ]]; then
            LOCAL_PLAYLIST+=("$selected")
            echo "  Added to playlist: $(basename "$selected")"
            sleep 0.5
          else
            echo "  Now playing: $(basename "$selected")"
            if [ "$loop" = true ]; then
              echo "  Loop mode activated"
              echo
              mpv --no-video --loop "$selected"
            else
            echo
              mpv --no-video "$selected"
            fi
            sleep 1
          fi
        else
          echo "  Unsupported file type."
          sleep 1
        fi
      else
        echo "  Invalid input: $num"
        sleep 1
      fi
    done
  done
}

search_with_list() {
  local query="$1"
  local loop="$2"
  echo -n "                  Searching for: $query "

  # Start spinner animation in background
  (while :; do for var in / - \\ \|; do echo -en "\r                  Searching for: $query $var"; sleep .1; done; done) &
  LOAD_PID=$!
  disown $LOAD_PID

  # Perform the actual search
  local search_results
  search_results=$(yt-dlp "ytsearch${SEARCH_RESULTS_SIZE}:$query" --print "%(title)s | %(id)s | %(duration_string)s" 2>/dev/null) || {
    kill "$LOAD_PID" &>/dev/null
    echo -e "\r                  Failed to search for: $query"
    return 1
  }

  # Kill the spinner
  kill "$LOAD_PID" &>/dev/null
  wait "$LOAD_PID" 2>/dev/null

  echo -e "\r                  Search complete for: $query       "

  if [ -z "$search_results" ]; then
    echo "                  No results found for: $query"
    sleep 1
    return 0
  fi
  
  echo
  echo "                  ====================[ Search Results ]===================="
  local i=1
  while IFS= read -r line; do
    # Split the line into parts
    IFS="|" read -r title id duration <<< "$line"
    printf "                  %d. %s (%s)\n" "$i" "$(echo "$title" | xargs)" "$(echo "$duration" | xargs)"
    i=$((i+1))
  done <<< "$search_results"
  echo "                  ========================================================="
  
  # Get user selection
  echo -n "                  Select a song (1-$SEARCH_RESULTS_SIZE) or 'q' to cancel: "
  read -r choice
  
  if [[ "$choice" =~ ^[0-9]+$ ]] && ((choice >= 1 && choice <= SEARCH_RESULTS_SIZE)); then
    # Extract the selected video ID
    local selected_line=$(echo "$search_results" | sed -n "${choice}p")
    local video_id=$(echo "$selected_line" | awk -F '|' '{print $2}' | xargs)
    local video_title=$(echo "$selected_line" | awk -F '|' '{print $1}' | xargs)
    
    echo "                  Selected: $video_title"
    echo
    stream_url=$(yt-dlp -f bestaudio -g "$video_id") || return 1
    
    LAST_STREAM_URL="$stream_url"
    LAST_QUERY="$video_title"
    add_to_history "$video_title" "$stream_url"
    
    play_stream "$stream_url" "$loop"
  else
    echo "                  Cancelled."
    sleep 1
  fi
}

add_to_history() {
  local query="$1"
  local url="$2"
  
  local clean_query="${query%% -r}" # This will remove -r flag if present before adding to history
  
  if [[ -z "${SONG_CACHE[$clean_query]}" ]]; then
    SONG_CACHE["$clean_query"]="$url"
    HISTORY+=("$clean_query")
    
    if [[ ${#HISTORY[@]} -gt $CACHE_LIMIT ]]; then
      local oldest_query="${HISTORY[0]}"
      unset SONG_CACHE["$oldest_query"]
      HISTORY=("${HISTORY[@]:1}")
    fi
  fi
}

show_history() {
  if [[ ${#HISTORY[@]} -eq 0 ]]; then
    echo "                  No songs in history yet!"
    sleep 1
    return
  fi
  echo
  echo "                  ==============[ Recently Streamed (Last $CACHE_LIMIT) ]=============="
  for i in "${!HISTORY[@]}"; do 
    echo "                         $((i+1)). ${HISTORY[$i]}"
  done
  echo "                  ========================================================="
  
  echo -ne "                  Enter number to replay (or any key to cancel): "
  read -r choice
  if [[ "$choice" =~ ^[0-9]+$ ]] && [[ "$choice" -ge 1 ]] && [[ "$choice" -le ${#HISTORY[@]} ]]; then
    local selected_query="${HISTORY[$((choice-1))]}"
    echo -n "                  Replay options: [1] Once  [2] Loop  [3] Cancel: "
    read -r mode
    case "$mode" in
      1)
        echo "                  Playing: $selected_query"
        LAST_STREAM_URL="${SONG_CACHE[$selected_query]}"
        LAST_QUERY="$selected_query"
        play_stream "${SONG_CACHE[$selected_query]}" false
        ;;
      2)
        echo "                  Looping: $selected_query"
        LAST_STREAM_URL="${SONG_CACHE[$selected_query]}"
        LAST_QUERY="$selected_query"
        play_stream "${SONG_CACHE[$selected_query]}" true
        ;;
      *)
        echo "Cancelled."
        ;;
    esac
  else
    echo "Cancelled."
  fi
}

download_last() {
  if [ -z "$LAST_STREAM_URL" ]; then
    echo "                  No song to download! Please play a song first."
    sleep 0.5
    return 1
  fi
  echo "                  Destination: $TARGET_DIR"
  echo "                  Audio Quality: ${AUDIO_QUALITY}kbps"

  clean_title=$(echo "$LAST_QUERY" | tr -dc '[:alnum:][:space:]' | tr ' ' '_')
  temp_file="${TMP_DIR}/${clean_title}.opus"
  final_file="${TARGET_DIR}/${clean_title}.mp3"

  # ---------- DOWNLOAD ----------
  echo -n "                  "
  (while :; do for var in / - \\ \|; do
      echo -en "\r                  $var Downloading: $LAST_QUERY, please wait..."
      sleep .1
    done; done) &
  LOAD_PID=$!
  disown $LOAD_PID

  yt-dlp --quiet --no-warnings --extract-audio --audio-format opus --audio-quality "${AUDIO_QUALITY}k" -o "$temp_file" "$LAST_STREAM_URL"
  download_status=$?

  kill $LOAD_PID 2>/dev/null
  echo -en "\r                                                  \r"

  if [ $download_status -ne 0 ]; then
    echo "                  Download failed!"
    [ -f "$temp_file" ] && rm "$temp_file"
    return 1
  fi

  echo -n "                  "
  (while :; do for var in / - \\ \|; do
      echo -en "\r                  $var Converting to MP3..."
      sleep .1
    done; done) &
  LOAD_PID=$!
  disown $LOAD_PID

  ffmpeg -v quiet -stats -i "$temp_file" -vn -acodec libmp3lame -q:a 2 "$final_file"
  convert_status=$?

  kill $LOAD_PID 2>/dev/null
  echo -en "\r                                                  \r"

  if [ $convert_status -eq 0 ]; then
    echo "                  Conversion complete!"
    rm "$temp_file"
    echo "                  Successfully downloaded: $final_file"
    sleep 1
    return 0
  else
    echo "                  Conversion failed!"
    [ -f "$temp_file" ] && rm "$temp_file"
    [ -f "$final_file" ] && rm "$final_file"
    return 1
  fi
}

settings_menu() {
  while true; do
    print_header
    echo "                  ======================[ Settings ]======================"
    echo "                     1. Current download directory: $TARGET_DIR"
    echo "                     2. Current audio quality: ${AUDIO_QUALITY}kbps"
    echo "                     3. Current search list size: ${SEARCH_RESULTS_SIZE}"
    echo "                  ========================================================"
    echo "                  Enter option number to change (q to return to main menu)"
    echo -n "                  >>> "
    read -r reply
    
    case "$reply" in
      q)
        return 0
        ;;
      1)
        echo "                  Current download directory: $TARGET_DIR"
        echo "                  Enter new directory path (or leave blank to keep current):"
        echo -n "                  >>>Enter your choice: "       
        read -r new_dir
        if [ -n "$new_dir" ]; then
          if [ -d "$new_dir" ]; then
            TARGET_DIR="$new_dir"
            mkdir -p "$TARGET_DIR"
            echo "                  Download directory changed to: $TARGET_DIR"
          else
            echo "                  Directory does not exist. Would you like to create it? (y/n)"
            read -r create_dir
            if [ "$create_dir" = "y" ]; then
              mkdir -p "$new_dir"
              if [ $? -eq 0 ]; then
                TARGET_DIR="$new_dir"
                echo "                  Download directory changed to: $TARGET_DIR"
              else
                echo "                  Failed to create directory. Please check permissions."
              fi
            else
              echo "                  Directory not changed."
            fi
          fi
        fi
        ;;
      2)
        echo "                         Current audio quality: ${AUDIO_QUALITY}kbps"
        echo "                         Select new audio quality:"
        echo "                         1. 64kbps (fastest, lowest quality)"
        echo "                         2. 128kbps"
        echo "                         3. 192kbps"
        echo "                         4. 256kbps"
        echo "                         5. 320kbps (slowest, best quality)"
        echo "                         Enter choice (1-5):"
        read -r quality_choice
        
        case "$quality_choice" in
          1) AUDIO_QUALITY="64" ;;
          2) AUDIO_QUALITY="128" ;;
          3) AUDIO_QUALITY="192" ;;
          4) AUDIO_QUALITY="256" ;;
          5) AUDIO_QUALITY="320" ;;
          *)
            echo "                  Invalid choice. Quality remains ${AUDIO_QUALITY}kbps"
            ;;
        esac
        echo "                  Audio quality set to: ${AUDIO_QUALITY}kbps"
        ;;
       3)
  	echo "                         Current search results size: $SEARCH_RESULTS_SIZE"
  	echo "                         Enter new search results size (1-20):"
  	read -r new_size
  	if [[ "$new_size" =~ ^[0-9]+$ ]] && ((new_size >= 1 && new_size <= 25)); then
    	  SEARCH_RESULTS_SIZE=$new_size
    	  echo "                  Search results size set to: $SEARCH_RESULTS_SIZE"
  	else
    	  echo "                  Invalid size. Must be between 1 and 25."
  	fi
  	;;
      *)
        echo "                  Invalid option"
        ;;
    esac
    
    sleep 1
  done
}

process_song() {
  local query="$1"
  local loop=false
  local list_mode=false

  # Check for flags
  if [[ "$query" == *" -r" ]]; then
    loop=true
    query="${query%% -r}" # Remove the -r flag
  fi

  if [[ "$query" == *" -l" ]]; then
    list_mode=true
    query="${query%% -l}" # Remove the -l flag
  fi

  if [ "$list_mode" = true ]; then
    search_with_list "$query" "$loop"
  else
    echo -n "                  Searching and streaming: $query "

    # This will start the spinner animation
    (while :; do for var in / - \\ \|; do echo -en "\r                  Searching and streaming: $query $var"; sleep .1; done; done) &
    LOAD_PID=$!
    disown $LOAD_PID

    # Perform the actual query
    stream_url=$(yt-dlp -f bestaudio -g "ytsearch1:$query" 2>/dev/null) || {
      kill "$LOAD_PID" &>/dev/null
      echo -e "\r                  Failed to find stream for: $query"
      return 1
    }

    # This will kill the spinner animation
    kill "$LOAD_PID" &>/dev/null
    wait "$LOAD_PID" 2>/dev/null

    echo -e "\r                  Streaming: $query                        "

    if [ -z "$stream_url" ]; then
      echo "                  No results found for: $query"
      sleep 1
      return 0
    fi

    LAST_STREAM_URL="$stream_url"
    LAST_QUERY="$query"
    add_to_history "$query" "$stream_url"

    play_stream "$stream_url" "$loop"
  fi

  return 0
}

main_loop() {
  while true; do
    print_header
    print_main_header
    echo
    center_block \
"==========================[ Main Menu ]==========================
  Enter a song name to start listening
  Enter multiple songs separated by asterisks for a playlist
  Add '-r' at the end to loop a song (e.g., 'song -r')
  Add '-l' at the end to show a list of results
================================================================="
    echo
    printf "%*s>>> Enter your choice: " $(( (cols-22)/2 )) ""
    read -r input
    
    case "$input" in
      q)
        exit 0
        ;;
      r)
        if [ -z "$LAST_STREAM_URL" ]; then
          echo "                  No song to repeat! Please search for a song first."
          sleep 1
          continue
        fi
        echo -n "                  Repeat options: [1] Once  [2] Loop  [3] Cancel: "
        read -r mode
        case "$mode" in
          1)
            echo "                  Repeating: $LAST_QUERY"
            play_stream "$LAST_STREAM_URL" false
            ;;
          2)
            echo "                  Looping: $LAST_QUERY"
            play_stream "$LAST_STREAM_URL" true
            ;;
          *)
            echo "                  Cancelled."
            ;;
        esac
        ;;
      h)
        show_history
        ;;
      d)
        if ! download_last; then
          sleep 2
        fi
        ;;
      s)
        settings_menu
        ;;
      l)
        browse_local_files "$HOME/Music"
        ;;
      *)
        if [[ -z "$input" ]]; then
         echo "                  No input entered. Returning to menu..."
         sleep 1
         continue
        fi
        # this will handle the comma-separated playlist
        if [[ "$input" == *** ]]; then
          IFS='*' read -ra songs <<< "$input"
          for song in "${songs[@]}"; do
            song=$(echo "$song" | xargs) # this trims whitespace has to be here
            [ -z "$song" ] && continue
            process_song "$song"
          done
        else
          process_song "$input"
        fi
        ;;
    esac
  done
}

main_loop
